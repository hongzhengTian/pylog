#include "{{top_name}}.h"
#include "ap_int.h"
int argmin_kernel{{s0}}(
            {% for i in range(s0-1) %}{{d0}} a_0_{{i}},
            {% endfor %}{{d0}} a_0_{{s0-1}})
{
    {% for i in range (1,log2_kernel_size+1) %}{{d0}}{% for j in range(index_temp[i-1]-1) %} a_{{i}}_{{j}},{%endfor%} a_{{i}}_{{index_temp[i-1]-1}};
    {%endfor%}

    {% for i in range (1,log2_kernel_size+1) %}int {% for j in range(index_temp[i-1]-1) %}index_a_{{i}}_{{j}}, {%endfor%}index_a_{{i}}_{{index_temp[i-1]-1}};
    {%endfor%}

    {% if (s0%2==0) %}
    {% for i in [1] %}{% for j in range(index_temp[0])%}
    if (a_{{i-1}}_{{j*2}} < a_{{i-1}}_{{j*2+1}}){
            a_{{i}}_{{j}} = a_{{i-1}}_{{j*2}};
            index_a_{{i}}_{{j}} = {{j*2}};
        }else {
            a_{{i}}_{{j}} = a_{{i-1}}_{{j*2+1}};
            index_a_{{i}}_{{j}} = {{j*2+1}};
        }{% endfor %}
    {% endfor %}
    {%else%}
    {% for i in [1] %}{% for j in range(index_temp[0]-1)%}
    if (a_{{i-1}}_{{j*2}} < a_{{i-1}}_{{j*2+1}}){
            a_{{i}}_{{j}} = a_{{i-1}}_{{j*2}};
            index_a_{{i}}_{{j}} = {{j*2}};
        }else {
            a_{{i}}_{{j}} = a_{{i-1}}_{{j*2+1}};
            index_a_{{i}}_{{j}} = {{j*2+1}};
        }{% endfor %}
    {% endfor %}
    a_{{1}}_{{index_temp[0]-1}} = a_{{0}}_{{s0-1}};
    index_a_{{1}}_{{index_temp[0]-1}} = {{s0-1}};
    {% endif %}

     {% for i in range(2,log2_kernel_size+1) %}{%set boundary = index_temp[i-1] if index_temp[i-2]%2==0 else (index_temp[i-1]-1) %}{% for j in range(boundary)%}
        if (a_{{i-1}}_{{j*2}} < a_{{i-1}}_{{j*2+1}}){
                a_{{i}}_{{j}} = a_{{i-1}}_{{j*2}};
                index_a_{{i}}_{{j}} = index_a_{{i-1}}_{{j*2}};
            }else {
                a_{{i}}_{{j}} = a_{{i-1}}_{{j*2+1}};
                index_a_{{i}}_{{j}} = index_a_{{i-1}}_{{j*2+1}};
        }{% endfor %}
        {% if index_temp[i-2]%2 !=0 %}
        a_{{i}}_{{index_temp[i-1]-1}}= a_{{i-1}}_{{index_temp[i-2]-1}};
        index_a_{{i}}_{{index_temp[i-1]-1}}= index_a_{{i-1}}_{{index_temp[i-2]-1}};
        {% endif %}
    {% endfor %}
    return index_a_{{log2_kernel_size}}_0;
}

int {{top_name}}({{d0}} input[{{s0}}])  {

    int  ret = argmin_kernel{{s0}}(
            {% for i in range(s0-1) %} input[{{i}}],
            {% endfor %} input[{{s0-1}}]);
    return ret;

}
